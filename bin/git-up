#!/bin/bash
# Usage: git up [options] <stage> [commit-ish]
# Deploy commit to production servers
# --help        : this help
# --force		: ...
# --check		: check before and display diff
# --info		: get current working tree infos
# --debug       : for bug fixing (please use it for issues)
#
#With options:
#    <stage> hotfix          : quick hotfix
#    <stage> release         : new release
#    <stage> revert TOREF    : revert <stage> to TOREF
#    <stage> diff            : diff between stage and your HEAD
#    <stage> whatchanged     : whatchanged between <stage> and your HEAD
#    <stage> sync REF        : re-sync prod or preprod to REF
#
#TIPS:
#    <stage> hotfix -p       : params -* are passed to git log
#
# https://github.com/ezweb/git-up


set -e
shopt -s xpg_echo


# 
# CONFIG
#
# Search git-up on those remotes :
remotes="prod production origin"
sshopts="-x -A"
remoteuri=
remote=
sshhost=
reponame=
LANG=C
stage=preprod # default stage
debug=0 # --debug
check=0
force=0
diff=0
upopts=
infosonly=0
commitish=
newtag=

# deprecated?
hotfix=1
release=0
revertto=
resync=0

# 
# FUNCTIONS
#

Usage() {
	{ sed -n -e '/^# Usage:/,/^$/ s/^# \?//p' < $0; exit; }
}

error() {
    echo "\033[41m\033[1;33mCRITICAL: $@\033[0m"
	exit 42
}
warn () {
    echo "\033[41m\033[1;33mWARNING: $@\033[0m"
}

info () {
    echo "\033[44m\033[1;36m$@\033[0m"
}

msg () {
    echo "\033[40m\033[1;36m$@\033[0m"
}

msgy () {
    echo "\033[40m\033[1;33m$@\033[0m"
}

debug() {
	if [ $debug -gt 0 ]
	then
		echo "% DEBUG: [$( date -R )] >>> $@" >&2
	fi
}

check_prerequisites() {
	for tool in ssh awk grep git
	do
		if ! type $tool >/dev/null
		then
			error "the tool '$tool' is required."
		fi
	done
}


get_remote() {
	for search in $remotes
	do
		if git remote show -n | grep -q "^$search$"
		then
			remote="$search"
			remoteuri=$( git remote show -n "$search" | grep "Fetch URL" | awk '{print $3}' )
			sshhost=${remoteuri%%:*}
			reponame=${remoteuri##*:}
			reponame=${reponame##*/}
			reponame=${reponame%%.git}
			return
		fi
	done
	error "Remote not found."
}


check_connection() {
	echo -n "Try to connect to $sshhost ... "
	ssh $sshopts $sshhost up test
	echo OK.
}


up_to_date() {
	git fetch --quiet origin 
}


get_next_tag() {
	local autotag="$( dirname $0 )/autotag.pl"
	if type perl >/dev/null && [ -e $autotag ]
	then
		autotag="perl '$autotag'"
	else
		msgy "hint: install Perl for better performance ;)" >&2
		autotag="ssh $sshopts $sshhost up autotag"
	fi
	debug "autotag: $autotag"
	tag_pattern=
	debug "hotfix=$hotfix release=$release pattern=$tag_pattern"

	# with tag pattern, grep all
	if [ -z "$tag_pattern" ]
	then
		tag_pattern=".*"
	fi

	if [ $hotfix -gt 0 ]
	then
		newtag=$( git tag -l | grep -E "$tag_pattern" | $autotag --nofetch --short )
	elif [ $release -gt 0 ]
	then
		newtag=$( git tag -l | grep -E "$tag_pattern" | $autotag --nofetch --short --release )
	fi
}

fetch_info() {
	msg ">>> Connect to remote $sshhost ..."
	infofile="/tmp/${USER}.git-up-info.$$"
	if ssh $sshopts $sshhost up $upopts "$reponame" $stage --init "$commitish" infos >$infofile
	then
		. $infofile
		if [ $debug -gt 0 ]
		then
			debug "----------------------------"
			cat $infofile >&2
			debug "----------------------------"
		fi
		rm -f $infofile
	else
		cat $infofile
		rm -f $infofile
		chead=
	fi

	if [ -z "$chead" ]
	then
		error "Failed to get current ref for <$stage>"
	fi

	blockcolor="\033[44m\033[1;37m"
	echo -n $blockcolor
	echo -n "|--------------------------------------------------------------------|"
	echo "\033[0m"

	echo -n $blockcolor
	echo -n "|                                                                    |\r"
	echo -n "| $reponame <$stage> is on "
	if [ ${#cpretty} -gt 12 ]
	then
		echo "\033[0m"

		echo -n $blockcolor
		echo -n "|                                                                    |\r"
		echo -n "| $cpretty"
	else
		echo -n "$cpretty"
	fi
	echo "\033[0m"

	echo -n $blockcolor
	echo -n "|                                                                    |\r"
	echo -n "| >> deploying to $commitish <<"
	echo "\033[0m"

	echo -n $blockcolor
	echo -n "|--------------------------------------------------------------------|"
	echo "\033[0m"
}


check_pushed() {
	ref=$( git rev-parse $commitish )
	if git cherry | grep -q "$ref$"
	then
		commits=$( git cherry | wc -l )
		m="You have to push your commits ! ($commits commit"
		if [ $commits -gt 1 ]
		then
			m="${m}s"
		fi
		m="$m waits to be pushed)"
		error "$m"
	fi
}

resync() {
	ssh $sshopts $sshhost up $upopts "$reponame" $stage sync "$commitish"
}


gitdiff() {
	diff=$1
	shift
	d1=HEAD
	if [ -n "$1" ]
	then
		d1="$1"
		shift
	fi
	d2="$cpretty"

	if [ "$d1" = "$d2" ]
	then
		return
	fi

	msg "[$stage] DIFF: $@ $d2..$d1"
	if [ $diff -eq 1 ]
	then
		git diff $@ $d2 $d1
	elif [ $diff -eq 2 ]
	then
		git whatchanged --stat --format="%Cred author : %an --- %Cgreen date :  %ad" $@ $d2..$d1
	elif [ $diff -eq 3 ]
	then
		git log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' $@ $d2..$d1
	fi
}


gitopts=""
while [ $# -gt 0 ]
do
	case "$1" in
		hotfix) # default ...
			hotfix=1
			release=0
			;;
		release)
			release=1
			hotfix=0
			;;
		revert|sync)
			release=0
			hotfix=0
			resync=1
			;;
		diff)
			diff=1
			;;
		whatchanged)
			diff=2
			;;
		--check)
			check=1
			;;
		--force)
			force=1
			;;
		--help)
			Usage
			;;
		help)
			Usage
			;;
		--debug)
			debug=1
			upopts="--debug $upopts"
			;;
		--info)
			infosonly=1
			;;
		# git opts
		-*)
			gitopts="$gitopts $1"
			;;
		*)
			if [ -z "$stage" ]
			then
				stage="$1"
			elif [ -z "$commitish" ]
			then
				commitish="$1"
			else
				Usage
			fi
			;;
	esac
	shift
done

if [ -z "$stage" ]
then
	Usage
fi
if [ -z "$commitish" ]
then
	commitish=origin/master
fi

check_prerequisites

get_remote

#check_connection

up_to_date

fetch_info

if [ $debug -gt 0 ]
then
	msgy "-------------------"
	echo stage=$stage
	echo repo=$reponame
	echo remoteuri=$remoteuri
	echo remote=$remote
	echo "-------------------"
	echo hotfix=$hotfix
	echo release=$release
	echo diff=$diff
	msgy "-------------------"
fi


if [ $infosonly -gt 0 ]
then
	exit 0
fi

# DIFF / WHATCHANGED
if [ $diff -gt 0 ]
then
	gitdiff $diff
elif [ -n "$resync" ]
then
	resync

# DEPLOY
else
	check_pushed
	if [ $tag -gt 0 ]
	then
		get_next_tag
		if [ -z "$newtag" ]
		then
			echo "An unexpected error occurred while computing next tag."
			exit 2
		fi
	fi


	gitdiff 3 $commitish $gitopts # whatchanged
	if [ $tag -gt 0 ]
	then
		blockcolor="\033[44m\033[1;37m"
		echo -n $blockcolor
		echo -n "|--------------------------------------------------------------------|"
		echo "\033[0m"
		echo -n $blockcolor
		echo -n "|                                                                    |\r"
		echo -n "| Project: $reponame | Stage: $stage | $cpretty => $newtag "
		echo "\033[0m"
		echo -n $blockcolor
		echo -n "|--------------------------------------------------------------------|"
		echo "\033[0m"
		printf "Please validate this $( test $release -gt 0 && echo release || echo hotfix ) [yYnN] : "
		read proceed
		if [ "$proceed" = "y" ] || [ "$proceed" = "Y" ] # || [ "$proceed" = "" ]
		then
			# should trigger deploy :
			git tag $newtag && git push $remote $newtag
		else
			echo "CANCELED."
			exit 7
		fi
	else
		ssh $sshopts $sshhost up $upopts "$reponame" $stage sync "$commitish"
	fi
	exit 0
fi


